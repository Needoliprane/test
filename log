folder("Tools") {
  description("Folder for miscellaneous tools.")
}

job('Tools/clone-repository') {
  wrappers {
    preBuildCleanup()
  }
  parameters {
    stringParam('GIT_REPOSITORY_URL', null, 'Git URL of the repository to clone')
  }
  steps {
    shell('git clone $GIT_REPOSITORY_URL')
  }
}


job('Tools/SEED') {
  wrappers {
        preBuildCleanup {
            includePattern('*')
            deleteDirectories()
            cleanupParameter('CLEANUP')
        }
    }
  parameters {
    stringParam('GITHUB_NAME', null, 'GitHub repository owner/repo_name (e.g.: "EpitechIT31000/chocolatine")')
    stringParam('DISPLAY_NAME', null, 'Display name for the job')
    //globalVariableParam('GITHUB_NAME', '${GITHUB_NAMES}', 'GitHub repository owner/repo_name (e.g.: "EpitechIT31000/chocolatine")')
    //globalVariableParam('DISPLAY_NAME', '${DISPLAY_NAMES}', 'Display name for the job')
  }
  //environmentVariables(ONE: '$GITHUB_NAME', TWO:'$DISPLAY_NAME')

  //git_url = "${env.ONE}"
  //display_name = "${env.TWO}"

  steps {
    dsl {
        text('''job('seed_job') {
    displayName("$DISPLAY_NAME")
    wrappers {
          preBuildCleanup { // Clean before build
              includePattern('*')
              deleteDirectories()
              cleanupParameter('CLEANUP')
          }
      }
    scm {
git("$GITHUB_NAME", {node -> node/'extensions' << "})
    }
    triggers {
      scm('H/1 * * * *')
    }
    steps {
      shell('make fclean')
      shell('make')
      shell('make test')
      shell('make clean')
    }
}''')
    }
  }

}
